{"version":3,"file":"check.js","sourceRoot":"","sources":["../../src/utils/check.ts"],"names":[],"mappings":"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","sourcesContent":["import path from \"path\";\nimport fs from \"fs-extra\";\nimport semver from \"semver\";\nimport chalk from \"chalk\";\nimport validateProjectName from \"validate-npm-package-name\";\nimport logger from \"./logs\";\nimport https from \"https\";\nimport spawn from \"cross-spawn\";\nimport {execSync} from \"child_process\";\nimport dns from 'dns'\nimport {URL} from \"url\";\nimport {getCachePath, getCacheTemplatePackageName, getHttpClientAdapter, getProxy} from \"./get\";\nimport {buildInRegistryList, packageJson} from \"./const\";\nimport search from \"libnpmsearch\";\n\n\nconst {error, log} = logger\n\nexport function checkAppName(appName: string, autoExited = true) {\n    const validationResult = validateProjectName(appName);\n    if (!validationResult.validForNewPackages) {\n        log()\n        error(\n            chalk.red(\n                `无法使用 ${chalk.green(\n                    `\"${appName}\"`\n                )} 作为名称来创建项目，因为项目命名遵循 npm 命名最佳实践:\\n`\n            )\n        );\n        [\n            ...(validationResult.errors || []),\n            ...(validationResult.warnings || []),\n        ].forEach(err => {\n            error(chalk.red(`  * ${err}`));\n        });\n        error(chalk.red('\\n请使用一个不同的项目名称.'));\n        autoExited && process.exit(1);\n    }\n    return validationResult.validForNewPackages\n    // TODO: there should be a single place that holds the dependencies\n}\n\n\nexport function checkPackageNodeVersionSupported(packageName: string) {\n    const packageJsonPath = path.resolve(\n        process.cwd(),\n        'node_modules',\n        packageName,\n        'package.json'\n    );\n\n    if (!fs.existsSync(packageJsonPath)) {\n        return;\n    }\n\n    const packageJson = require(packageJsonPath);\n    if (!packageJson.engines || !packageJson.engines.node) {\n        return;\n    }\n\n    if (!semver.satisfies(process.version, packageJson.engines.node)) {\n        console.error(\n            chalk.red(\n                'You are running Node %s.\\n' +\n                'Unlimited Blade Works requires Node %s or higher. \\n' +\n                'Please update your version of Node.'\n            ),\n            process.version,\n            packageJson.engines.node\n        );\n        process.exit(1);\n    }\n}\n\n// 如果项目创建目录只存在由 Gitlab 等生成的文件，那么就是安全的.\n// 同时，如果项目创建目录存在之前安装残留的错误日志，则移除他们.\nexport function isSafeToCreateProjectIn(root: string) {\n    const validFiles = [\n        '.DS_Store',\n        '.git',\n        '.gitattributes',\n        '.gitignore',\n        '.gitlab-ci.yml',\n        '.hg',\n        '.hgcheck',\n        '.hgignore',\n        '.idea',\n        '.npmignore',\n        '.travis.yml',\n        'docs',\n        'LICENSE',\n        'README.md',\n        'mkdocs.yml',\n        'Thumbs.db',\n    ];\n    // 在安装失败后，这些文件应该被允许保留下，但是在下一次安装时会静默的自动移除。\n    const errorLogFilePatterns = [\n        'npm-debug.log',\n        'yarn-error.log',\n        'yarn-debug.log',\n        'pnpm-debug.log',\n    ];\n    const isErrorLog = (file: string) => {\n        return errorLogFilePatterns.some(pattern => file.startsWith(pattern));\n    };\n\n    const conflicts = fs\n        .readdirSync(root)\n        .filter(file => !validFiles.includes(file))\n        // IntelliJ IDEA creates module files before CRA is launched\n        .filter(file => !/\\.iml$/.test(file))\n        // Don't treat log files from previous installation as conflicts\n        .filter(file => !isErrorLog(file));\n\n    if (conflicts.length > 0) {\n        log(\n            `目录 ${chalk.green(path.basename(root))} 存在会造成冲突的文件:`\n        );\n        log();\n        for (const file of conflicts) {\n            try {\n                const stats = fs.lstatSync(path.join(root, file));\n                if (stats.isDirectory()) {\n                    log(`  ${chalk.blue(`${file}/`)}`);\n                } else {\n                    log(`  ${file}`);\n                }\n            } catch (e) {\n                log(`  ${file}`);\n            }\n        }\n        log();\n        log(\n            `请使用一个新的目录名称，或删除上述文件，或者使用 ${chalk.green('\\`--override\\`')} 参数以启用覆写模式，将会强制覆盖掉和项目工程模板产生冲突的文件`\n        );\n\n        return false;\n    }\n\n    // Remove any log files from a previous installation.\n    fs.readdirSync(root).forEach(file => {\n        if (isErrorLog(file)) {\n            fs.removeSync(path.join(root, file));\n        }\n    });\n    return true;\n}\n\nexport function checkForLatestVersion(registry: string) {\n    return new Promise((resolve, reject) => {\n            getHttpClientAdapter(registry)\n                .get(\n                    `${registry}/-/package/${packageJson.name}/dist-tags`,\n                    res => {\n                        if (res.statusCode === 200) {\n                            let body = '';\n                            res.on('data', data => (body += data));\n                            res.on('end', () => {\n                                resolve(JSON.parse(body).latest as string);\n                            });\n                        } else {\n                            reject();\n                        }\n                    }\n                )\n                .on('error', () => {\n                    reject();\n                });\n    });\n}\n\nexport function checkThatNpmCanReadCwd() {\n    const cwd = process.cwd();\n    let childOutput = null;\n    try {\n        // Note: intentionally using spawn over exec since\n        // the problem doesn't reproduce otherwise.\n        // `npm config list` is the only reliable way I could find\n        // to reproduce the wrong path. Just printing process.cwd()\n        // in a Node process was not enough.\n        childOutput = spawn.sync('npm', ['config', 'list']).output.join('');\n    } catch (err) {\n        // Something went wrong spawning node.\n        // Not great, but it means we can't do this check.\n        // We might fail later on, but let's continue.\n        return true;\n    }\n    if (typeof childOutput !== 'string') {\n        return true;\n    }\n    const lines = childOutput.split('\\n');\n    // `npm config list` output includes the following line:\n    // \"; cwd = C:\\path\\to\\current\\dir\" (unquoted)\n    // I couldn't find an easier way to get it.\n    const prefix = '; cwd = ';\n    const line = lines.find(line => line.startsWith(prefix));\n    if (typeof line !== 'string') {\n        // Fail gracefully. They could remove it.\n        return true;\n    }\n    const npmCWD = line.substring(prefix.length);\n    if (npmCWD === cwd) {\n        return true;\n    }\n    error(\n        chalk.red(\n            `Could not start an npm process in the right directory.\\n\\n` +\n            `The current directory is: ${chalk.bold(cwd)}\\n` +\n            `However, a newly started npm process runs in: ${chalk.bold(\n                npmCWD\n            )}\\n\\n` +\n            `This is probably caused by a misconfigured system terminal shell.`\n        )\n    );\n    if (process.platform === 'win32') {\n        error(\n            chalk.red(`On Windows, this can usually be fixed by running:\\n\\n`) +\n            `  ${chalk.cyan(\n                'reg'\n            )} delete \"HKCU\\\\Software\\\\Microsoft\\\\Command Processor\" /v AutoRun /f\\n` +\n            `  ${chalk.cyan(\n                'reg'\n            )} delete \"HKLM\\\\Software\\\\Microsoft\\\\Command Processor\" /v AutoRun /f\\n\\n` +\n            chalk.red(`Try to run the above two lines in the terminal.\\n`) +\n            chalk.red(\n                `To learn more about this problem, read: https://blogs.msdn.microsoft.com/oldnewthing/20071121-00/?p=24433/`\n            )\n        );\n    }\n    return false;\n}\n\nexport function checkNpmVersion() {\n    let hasMinNpm = false;\n    let npmVersion = null;\n    try {\n        npmVersion = execSync('npm --version').toString().trim();\n        hasMinNpm = semver.gte(npmVersion, '6.0.0');\n    } catch (err) {\n        // ignore\n    }\n    return {\n        hasMinNpm: hasMinNpm,\n        npmVersion: npmVersion,\n    };\n}\n\nexport function checkYarnVersion() {\n    const minYarnPnp = '1.12.0';\n    const maxYarnPnp = '2.0.0';\n    let hasMinYarnPnp = false;\n    let hasMaxYarnPnp = false;\n    let yarnVersion = null;\n    try {\n        yarnVersion = execSync('yarnpkg --version').toString().trim();\n        if (semver.valid(yarnVersion)) {\n            hasMinYarnPnp = semver.gte(yarnVersion, minYarnPnp);\n            hasMaxYarnPnp = semver.lt(yarnVersion, maxYarnPnp);\n        } else {\n            // Handle non-semver compliant yarn version strings, which yarn currently\n            // uses for nightly builds. The regex truncates anything after the first\n            // dash. See #5362.\n            const trimmedYarnVersionMatch = /^(.+?)[-+].+$/.exec(yarnVersion);\n            if (trimmedYarnVersionMatch) {\n                const trimmedYarnVersion = trimmedYarnVersionMatch.pop()!;\n                hasMinYarnPnp = semver.gte(trimmedYarnVersion, minYarnPnp);\n                hasMaxYarnPnp = semver.lt(trimmedYarnVersion, maxYarnPnp);\n            }\n        }\n    } catch (err) {\n        // ignore\n    }\n    return {\n        hasMinYarnPnp,\n        hasMaxYarnPnp,\n        yarnVersion,\n    };\n}\n\nexport function checkPnpmVersion() {\n    let hasMinPnpm = false;\n    let pnpmVersion = null\n    try {\n        pnpmVersion = execSync('pnpm --version').toString().trim()\n        hasMinPnpm = semver.gte(pnpmVersion, '6.0.0');\n    } catch (err) {\n        // ignore\n    }\n    return {\n        hasMinPnpm,\n        pnpmVersion\n    }\n}\n\n\nexport function checkIfBuildInRegistryListOnline(): Promise<RegistryStatus[]> {\n    // 我们会按检测开发者所在环境是否可以访问下列三个注册源\n    return Promise.allSettled(buildInRegistryList.map(registry => checkIfRegistryOnline(registry))).then((registryOnlineStatusList: any) => {\n        return registryOnlineStatusList.map((status: PromiseFulfilledResult<RegistryStatus>) => status.value)\n    })\n}\n\ninterface RegistryStatus {\n    registry: string\n    isOnline: boolean\n}\n\nexport function checkIfRegistryOnline(registry: string) {\n    log(`正在检测注册源 ${registry} 的可用情况.`)\n    return new Promise<RegistryStatus>(resolve => {\n        dns.lookup((new URL(registry)).hostname, err => {\n            let proxy;\n            if (err != null && (proxy = getProxy())) {\n                // If a proxy is defined, we likely can't resolve external hostnames.\n                // Try to resolve the proxy name as an indication of a connection.\n                dns.lookup(new URL(proxy).hostname, proxyErr => {\n                    resolve({\n                        registry,\n                        isOnline: proxyErr == null\n                    });\n                });\n            } else {\n                resolve({\n                    registry,\n                    isOnline: err == null\n                });\n            }\n        });\n    }).then((registryStatus) => {\n        log(chalk.green(`${registryStatus.registry}: ${registryStatus.isOnline ? '可用' : '不可用'}`))\n        return registryStatus\n    })\n}\n\nexport function checkIfCouldUsingCache(template: search.Result) {\n    const templatePackageCachePath = getCachePath(getCacheTemplatePackageName(template.name, template.version))\n    if (fs.existsSync(templatePackageCachePath)) {\n        return templatePackageCachePath\n    } else {\n        return false\n    }\n}\n"]}