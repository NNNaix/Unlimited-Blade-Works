{"version":3,"file":"get.js","sourceRoot":"","sources":["../../src/utils/get.ts"],"names":[],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport {execSync} from \"child_process\";\nimport npmSearch from \"libnpmsearch\"\nimport search from \"libnpmsearch\"\nimport {\n    BOILERPLATE_PREFIX_NAME,\n    CACHE_FOLDER_NAME,\n    CACHE_JSON_NAME,\n    DEFAULT_GIT_REPO_URL,\n    PACKAGE_SCOPE,\n    packageJson\n} from './const'\nimport https from \"https\";\nimport http from \"http\";\nimport path from \"path\";\nimport fs from \"fs-extra\";\nimport logger from './logs'\n\n\nconst {error} = logger\n\nexport function getTemplatePackageTarballUrl(registry: string, templateName: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n        getHttpClientAdapter(registry).get(\n            `${registry}/${templateName}`,\n            res => {\n                if (res.statusCode === 200) {\n                    let body = '';\n                    res.on('data', data => (body += data));\n                    res.on('end', () => {\n                        const template = JSON.parse(body)\n                        resolve(template.versions[template['dist-tags'].latest].dist.tarball as string);\n                    });\n                } else {\n                    reject(res.statusMessage);\n                }\n            }\n        )\n            .on('error', (err) => {\n                reject(err);\n            });\n    })\n}\n\n\n// 基于选择的模板名称路径获取 package 名称.\n// export function getPackageInfo(installPackage) {\n//     if (installPackage.match(/^.+\\.(tgz|tar\\.gz)$/)) {\n//         return getTemporaryDirectory()\n//             .then(obj => {\n//                 let stream;\n//                 if (/^http/.test(installPackage)) {\n//                     stream = hyperquest(installPackage);\n//                 } else {\n//                     stream = fs.createReadStream(installPackage);\n//                 }\n//                 return extractStream(stream, obj.tmpdir).then(() => obj);\n//             })\n//             .then(obj => {\n//                 const { name, version } = require(path.join(\n//                     obj.tmpdir,\n//                     'package.json'\n//                 ));\n//                 obj.cleanup();\n//                 return { name, version };\n//             })\n//             .catch(err => {\n//                 // The package name could be with or without semver version, e.g. react-scripts-0.2.0-alpha.1.tgz\n//                 // However, this function returns package name only without semver version.\n//                 console.log(\n//                     `Could not extract the package name from the archive: ${err.message}`\n//                 );\n//                 const assumedProjectName = installPackage.match(\n//                     /^.+\\/(.+?)(?:-\\d+.+)?\\.(tgz|tar\\.gz)$/\n//                 )[1];\n//                 console.log(\n//                     `Based on the filename, assuming it is \"${chalk.cyan(\n//                         assumedProjectName\n//                     )}\"`\n//                 );\n//                 return Promise.resolve({ name: assumedProjectName });\n//             });\n//     } else if (installPackage.startsWith('git+')) {\n//         // Pull package name out of git urls e.g:\n//         // git+https://github.com/mycompany/react-scripts.git\n//         // git+ssh://github.com/mycompany/react-scripts.git#v1.2.3\n//         return Promise.resolve({\n//             name: installPackage.match(/([^/]+)\\.git(#.*)?$/)[1],\n//         });\n//     } else if (installPackage.match(/.+@/)) {\n//         // Do not match @scope/ when stripping off @version or @tag\n//         return Promise.resolve({\n//             name: installPackage.charAt(0) + installPackage.substr(1).split('@')[0],\n//             version: installPackage.split('@')[1],\n//         });\n//     } else if (installPackage.match(/^file:/)) {\n//         const installPackagePath = installPackage.match(/^file:(.*)?$/)[1];\n//         const { name, version } = require(path.join(\n//             installPackagePath,\n//             'package.json'\n//         ));\n//         return Promise.resolve({ name, version });\n//     }\n//     return Promise.resolve({ name: installPackage });\n// }\n\n\nfunction getTemplateSelection(tpl: search.Result) {\n    return {\n        name: `${tpl.name} ${chalk.grey(`- ${tpl.description ?? `v${tpl.version}`}`)}`,\n        value: tpl\n    }\n}\n\nexport async function getAvailableTemplateList(registry: string, template = '', isOffline = false) {\n    try {\n        if (!isOffline) {\n            return npmSearch(template || PACKAGE_SCOPE, {  registry })\n                .then(list => list\n                    .filter((tpl) => tpl.name.startsWith(BOILERPLATE_PREFIX_NAME) && tpl.name.includes(template) && tpl.name !== packageJson.name)\n                    .map((tpl) => getTemplateSelection(tpl)))\n                .catch(err => {\n                    error(err.message)\n                    error(chalk.red(`获取远程项目工程模板列表失败.\\n 请检查当前设备的网络环境以及代理设置或使用 ${chalk.green('\\`--offline\\`')} 参数以启用离线模式.`))\n                })\n        } else {\n            const cacheJson = fs.readJSONSync(path.resolve(getCachePath(), CACHE_JSON_NAME))\n            return fs.readdirSync(getCachePath(PACKAGE_SCOPE)).map(name => getTemplateSelection(cacheJson[`${PACKAGE_SCOPE}/${name}`])).filter(({name}) => name.includes(template))\n        }\n    } catch (err) {\n        error(err.message)\n    }\n}\n\nexport function getProxy() {\n    if (process.env.https_proxy) {\n        return process.env.https_proxy;\n    } else {\n        try {\n            // Trying to read https-proxy from .npmrc\n            let httpsProxy = execSync('npm config get https-proxy').toString().trim();\n            return httpsProxy !== 'null' ? httpsProxy : undefined;\n        } catch (e) {\n            return;\n        }\n    }\n}\n\nexport function getHomeCrossPlatform(): string {\n    if (process.env.HOME) return process.env.HOME; // Linux\n    return process.env.USERPROFILE as string; // Windows\n}\n\nexport function getCachePath(template = '') {\n    const cacheDirectory = path.resolve(getHomeCrossPlatform(), CACHE_FOLDER_NAME)\n    fs.ensureDirSync(path.resolve(cacheDirectory, PACKAGE_SCOPE))\n    return path.resolve(cacheDirectory, template)\n}\n\nexport function getCacheTemplatePackageName(name: string, version: string) {\n    return `${name}.${version}.tar.gz`\n}\n\nexport function getHttpClientAdapter(url: string) {\n    return (url.startsWith('https') ? https : http)\n\n}\n\n// export function getTemplatePackageManager(): SupportedPackageManager{\n//\n// }\n"]}