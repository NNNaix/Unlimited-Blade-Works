{"version":3,"file":"logs.js","sourceRoot":"","sources":["../../src/utils/logs.ts"],"names":[],"mappings":";;;;;AAAA,iCAA6D;AAC7D,8DAAqC,CAAC,iBAAiB;AACvD,mCAAmC;AAGnC,MAAM,EAAC,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAC,GAAG,qBAAU,CAAA;AAelD,MAAM,MAAM,GAAG,EAA6H,CAAC;AAE7I,cAAc;AACd,MAAM,YAAY,GAAmB;IACjC;QACI,IAAI,EAAE,kBAAU,CAAC,OAAO;QACxB,KAAK,EAAE,aAAK;KACf;IACD;QACI,IAAI,EAAE,kBAAU,CAAC,KAAK;QACtB,KAAK,EAAE,WAAG;KACb;IACD;QACI,IAAI,EAAE,kBAAU,CAAC,OAAO;QACxB,KAAK,EAAE,cAAM;KAChB;IACD;QACI,IAAI,EAAE,kBAAU,CAAC,IAAI;QACrB,KAAK,EAAE,YAAI;KACd;IACD;QACI,IAAI,EAAE,kBAAU,CAAC,GAAG;KACvB;CACJ,CAAC;AACF,OAAO;AACP,YAAY,CAAC,OAAO,CAAC,CAAC,EAAC,IAAI,EAAE,KAAK,EAAE,MAAM,GAAG,EAAE,EAAe,EAAQ,EAAE;IACpE;;;;;OAKG;IACH,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAuB,EAAQ,EAAE;QAC7C,QAAQ;QACR,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC1B,MAAM,EAAC,IAAI,EAAE,OAAO,GAAG,EAAE,EAAE,MAAM,EAAE,SAAS,GAAG,EAAE,EAAC,GAAG,IAAI,CAAC;YAC1D,OAAO,IAAI,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,GAAG,GAAG,GAAG,IAAI,EAAE,CAAC,CAAC;SACvD;aAAM,IAAI,KAAK,EAAE;YACd,QAAQ;YACR,OAAO,CAAC,GAAG,CAAC,GAAG,MAAM,GAAG,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;SACtE;aAAM;YACH,OAAO,CAAC,GAAG,CAAC,IAAI,aAAJ,IAAI,cAAJ,IAAI,GAAI,EAAE,CAAC,CAAC;SAC3B;IACL,CAAC,CAAC;AACN,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,IAAI,GAAG;IACV,KAAK;IACL,OAAO;IACP,IAAI;IACJ,OAAO;CACV,CAAA;AAED,kBAAe,MAAM,CAAA","sourcesContent":["import {blue, Chalk, green, red, yellow, white} from \"chalk\";\nimport logSymbols from \"log-symbols\"; // 显示出 √ 或 × 等的图标\nimport {LoggerType} from \"./const\";\n\n\nconst {success, error, info, warning} = logSymbols\n\n\nexport interface LoggerParams {\n    type: LoggerType,\n    color?: Chalk\n    prefix?: string\n}\n\n// 日志 API\nexport type LogHandlerParams = string | {\n    text: string;\n    prefix?: string;\n}\n\nconst logger = {} as Record<LoggerType, (params?: LogHandlerParams) => void> & { icon: Record<Exclude<LoggerType, LoggerType.log>, string> };\n\n// 管理命令 log 颜色\nconst loggerParams: LoggerParams[] = [\n    {\n        type: LoggerType.success,\n        color: green\n    },\n    {\n        type: LoggerType.error,\n        color: red\n    },\n    {\n        type: LoggerType.warning,\n        color: yellow,\n    },\n    {\n        type: LoggerType.info,\n        color: blue,\n    },\n    {\n        type: LoggerType.log,\n    }\n];\n// 循环遍历\nloggerParams.forEach(({type, color, prefix = \"\"}: LoggerParams): void => {\n    /**\n     * 定义打印日志格式\n     *\n     * @param {string|LogAags} [text=\"\"] - 要输出的内容\n     * @returns {void}\n     */\n    logger[type] = (text?: LogHandlerParams): void => {\n        // 是否为对象\n        if (typeof text === \"object\") {\n            const {text: content = \"\", prefix: prefixTxt = \"\"} = text;\n            content && console.log(`${prefixTxt + \" \"}${text}`);\n        } else if (color) {\n            // 是否有颜色\n            console.log(`${prefix + \" \"}${color(type.toUpperCase())} ${text}`);\n        } else {\n            console.log(text ?? '');\n        }\n    };\n});\n\nlogger.icon = {\n    error,\n    success,\n    info,\n    warning,\n}\n\nexport default logger"]}